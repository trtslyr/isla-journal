name: Build Windows from Source (Clean)

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build-windows-clean:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Windows Build Tools
        run: |
          Write-Host "Setting up Windows build environment for native modules..."
          npm install --global windows-build-tools --vs2017 || Write-Host "Build tools already installed"
        continue-on-error: true
      
      - name: Clean Environment (Remove any artifacts)
        run: |
          Write-Host "Ensuring completely clean build environment..."
          if (Test-Path "dist") { Remove-Item -Path "dist" -Recurse -Force }
          if (Test-Path "out") { Remove-Item -Path "out" -Recurse -Force }
          if (Test-Path "node_modules") { Remove-Item -Path "node_modules" -Recurse -Force }
          if (Test-Path "package-lock.json") { Remove-Item -Path "package-lock.json" -Force }
          if (Test-Path ".npm") { Remove-Item -Path ".npm" -Recurse -Force }
          Write-Host "Environment completely cleaned"
        shell: powershell
      
      - name: Fresh Install Dependencies (No Postinstall)
        run: |
          Write-Host "Installing dependencies without postinstall hooks..."
          npm install --ignore-scripts
          Write-Host "Dependencies installed without scripts"
        shell: powershell
      
      - name: Rebuild Native Modules for Windows
        run: |
          Write-Host "Building native modules from source for Windows..."
          Write-Host "Node version: $(node --version)"
          Write-Host "NPM version: $(npm --version)"
          Write-Host "Platform: $env:OS"
          Write-Host "Architecture: $env:PROCESSOR_ARCHITECTURE"
          
          Write-Host "Building better-sqlite3..."
          npm rebuild better-sqlite3 --build-from-source --verbose
          
          Write-Host "Building systeminformation..."
          npm rebuild systeminformation --verbose
          
          Write-Host "Running @electron/rebuild..."
          npx @electron/rebuild --verbose --force
          
          Write-Host "Native modules built successfully"
        shell: powershell
      
      - name: Verify Native Modules
        run: |
          Write-Host "Verifying native module binaries..."
          
          # Check better-sqlite3
          if (Test-Path "node_modules\better-sqlite3\build\Release\better_sqlite3.node") {
            Write-Host "SUCCESS: better-sqlite3 binary exists"
            $size = (Get-Item "node_modules\better-sqlite3\build\Release\better_sqlite3.node").Length
            Write-Host "   Size: $size bytes"
          } else {
            Write-Host "ERROR: better-sqlite3 binary missing"
            exit 1
          }
          
          # Check systeminformation
          if (Test-Path "node_modules\systeminformation\lib") {
            Write-Host "SUCCESS: systeminformation module exists"
          } else {
            Write-Host "ERROR: systeminformation module missing"
            exit 1
          }
          
          # Test loading the modules
          Write-Host "Testing module loading..."
          node -e "
            try {
              const Database = require('better-sqlite3');
              console.log('SUCCESS: better-sqlite3 loads successfully');
              const si = require('systeminformation');
              console.log('SUCCESS: systeminformation loads successfully');
            } catch (error) {
              console.error('ERROR: Module loading failed:', error.message);
              process.exit(1);
            }
          "
        shell: powershell
      
      - name: Build Application from Source
        run: |
          Write-Host "Building application completely from source..."
          Write-Host "Building Vite frontend..."
          npm run build:vite
          
          Write-Host "Building main process..."
          npm run build:main
          
          Write-Host "Building preload script..."  
          npm run build:preload
          
          Write-Host "Application build completed"
        shell: powershell
      
      - name: Verify Build Output
        run: |
          Write-Host "Verifying build output..."
          
          if (Test-Path "dist\main\index.js") {
            Write-Host "SUCCESS: Main process built: dist\main\index.js"
            $size = (Get-Item "dist\main\index.js").Length
            Write-Host "   Size: $size bytes"
          } else {
            Write-Host "ERROR: Main process missing: dist\main\index.js"
            exit 1
          }
          
          if (Test-Path "dist\preload\index.js") {
            Write-Host "SUCCESS: Preload script built: dist\preload\index.js"
          } else {
            Write-Host "ERROR: Preload script missing: dist\preload\index.js"
            exit 1
          }
          
          if (Test-Path "dist\renderer") {
            Write-Host "SUCCESS: Renderer built: dist\renderer"
          } else {
            Write-Host "ERROR: Renderer missing: dist\renderer"
            exit 1
          }
        shell: powershell
      
      - name: Generate Icons (Optional)
        run: |
          Write-Host "Generating application icons..."
          npm run icons
        continue-on-error: true
        shell: powershell
      
      - name: Package Windows Application
        run: |
          Write-Host "Packaging Windows application..."
          npm run make
          Write-Host "Windows packaging completed"
        shell: powershell
      
      - name: Verify Windows Installer
        run: |
          Write-Host "Verifying Windows installer..."
          
          if (Test-Path "out\make\squirrel.windows") {
            Write-Host "SUCCESS: Squirrel installer directory exists"
            $installers = Get-ChildItem "out\make\squirrel.windows" -Recurse -Include "*.exe"
            if ($installers.Count -gt 0) {
              Write-Host "SUCCESS: Windows installer(s) created:"
              foreach ($installer in $installers) {
                $size = $installer.Length
                Write-Host "   $($installer.FullName) ($size bytes)"
              }
            } else {
              Write-Host "ERROR: No .exe installers found"
              exit 1
            }
          } else {
            Write-Host "ERROR: Squirrel installer directory missing"
            exit 1
          }
        shell: powershell
      
      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer-clean
          path: out/make/squirrel.windows/**/*.exe
          retention-days: 30
      
      - name: Create Release (if tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: out/make/squirrel.windows/**/*.exe
          name: "Isla Journal ${{ github.ref_name }}"
          draft: false
          prerelease: false
          generate_release_notes: true