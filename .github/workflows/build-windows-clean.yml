name: Build Windows from Source (Clean)

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build-windows:
    runs-on: windows-latest
    name: Build Windows x64
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Display Build Info
        shell: bash
        run: |
          echo "Building for: Windows x64"
          echo "Platform: win32"
          echo "Architecture: x64"
          echo "Host OS: ${{ runner.os }}"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Python version: $(python --version 2>/dev/null || echo 'Python not found')"
          echo "Visual Studio: $(where cl.exe 2>/dev/null || echo 'cl.exe not found')"
      
      - name: Clean Install Dependencies
        shell: bash
        run: |
          echo "Fresh install with platform isolation..."
          # Complete clean slate to prevent cross-platform contamination
          rm -rf node_modules package-lock.json dist .npm-cache 2>/dev/null || true
          rm -rf ~/.electron ~/.cache/electron ~/.cache/node-gyp 2>/dev/null || true
          
          # Platform-specific installation
          echo "Installing for platform: win32-x64"
          npm install --package-lock-only
          npm ci --cache .npm-cache --prefer-offline
          echo "Dependencies installed successfully for Windows x64"
      
      - name: Setup Windows Build Tools
        shell: bash
        run: |
          echo "Setting up Windows build tools..."
          # Set Python path for node-gyp via environment
          export PYTHON=$(which python || which python3)
          echo "Python path: $PYTHON"
          
          # Install Windows build tools if needed
          npm install --global windows-build-tools 2>/dev/null || echo "Build tools already available"
          
          echo "Build tools configured"
      
      - name: Rebuild Native Modules from Source
        shell: bash
        env:
          npm_config_target_platform: win32
          npm_config_target_arch: x64
          npm_config_build_from_source: true
          npm_config_electron_cache: ""
          npm_config_cache: ""
        run: |
          echo "Building native modules from source for win32-x64"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          
          # Ensure Electron is installed before rebuilding
          if ! npm list electron >/dev/null 2>&1; then
            echo "Installing electron..."
            npm install electron
          fi
          
          # Get Electron version for proper rebuild
          ELECTRON_VERSION=$(npm list electron --depth=0 | grep electron@ | sed 's/.*electron@//' | sed 's/ .*//')
          echo "Electron version: $ELECTRON_VERSION"
          
          # Clean only native binaries, not entire build directories
          echo "Cleaning existing native module binaries..."
          find node_modules -name "*.node" -delete 2>/dev/null || true
          find node_modules -path "*/build/Release" -name "*.node" -delete 2>/dev/null || true
          
          # Rebuild Electron app native modules
          echo "Rebuilding Electron app native modules..."
          npx --yes @electron/rebuild --verbose --force --arch=x64 --version=$ELECTRON_VERSION
          
          echo "Native modules rebuilt successfully"
      
      - name: Verify Native Modules
        shell: bash
        run: |
          echo "Verifying native modules for win32-x64"
          
          # Test better-sqlite3 binary exists
          SQLITE_BINARY="node_modules/better-sqlite3/build/Release/better_sqlite3.node"
          if [[ -f "$SQLITE_BINARY" ]]; then
            echo "✓ better-sqlite3 binary exists"
            ls -la "$SQLITE_BINARY"
          else
            echo "✗ better-sqlite3 binary missing"
            echo "Contents of build directory:"
            ls -la node_modules/better-sqlite3/build/ 2>/dev/null || echo "No build directory"
            exit 1
          fi
          
          # Test loading
          node -e "
            try {
              require('better-sqlite3');
              console.log('✓ better-sqlite3 loads successfully');
            } catch(e) {
              console.log('✗ better-sqlite3 load failed:', e.message);
              process.exit(1);
            }
          "
          
          echo "Native modules verified"
      
      - name: Build Application
        shell: bash
        run: |
          echo "Building application for win32-x64"
          
          # Use the comprehensive npm build script
          echo "Building complete application using npm build script..."
          npm run build
          
          # Verify all build outputs
          echo "Verifying build outputs..."
          
          # Verify frontend build
          if [[ ! -d "dist/renderer" ]]; then
            echo "✗ Frontend build failed - dist/renderer missing"
            echo "Contents of dist directory:"
            ls -la dist/ 2>/dev/null || echo "dist directory doesn't exist"
            exit 1
          fi
          echo "✓ Frontend build successful"
          
          # Verify main process build
          if [[ ! -f "dist/main/index.js" ]]; then
            echo "✗ Main process build failed - dist/main/index.js missing"
            echo "Contents of dist/main:"
            ls -la dist/main/ 2>/dev/null || echo "dist/main directory doesn't exist"
            exit 1
          fi
          echo "✓ Main process build successful"
          
          # Verify preload build  
          if [[ ! -f "dist/preload/index.js" ]]; then
            echo "✗ Preload build failed - dist/preload/index.js missing"
            echo "Contents of dist/preload:"
            ls -la dist/preload/ 2>/dev/null || echo "dist/preload directory doesn't exist"
            exit 1
          fi
          echo "✓ Preload build successful"
          
          echo "Application build completed"
      
      - name: Test Application
        shell: bash
        run: |
          echo "Testing application startup for win32-x64"
          
          export CI=true
          export NODE_ENV=test
          
          # Test main process loading
          node -e "
            process.env.NODE_ENV = 'test';
            try {
              console.log('Testing main process...');
              const main = require('./dist/main/index.js');
              console.log('✓ Main process structure valid');
            } catch (error) {
              if (error.message.includes('app.whenReady') || 
                  error.message.includes('electron') ||
                  error.message.includes('getPath') ||
                  error.message.includes('Cannot read properties of undefined')) {
                console.log('✓ Main process structure valid (Electron context expected)');
              } else {
                console.error('✗ Main process error:', error.message);
                process.exit(1);
              }
            }
          "
          
          # Test database functionality with proper error handling
          node -e "
            try {
              console.log('Testing database with Node.js version:', process.version);
              const Database = require('better-sqlite3');
              const db = new Database(':memory:');
              db.exec('CREATE TABLE test (id INTEGER PRIMARY KEY)');
              db.exec('INSERT INTO test (id) VALUES (1)');
              const row = db.prepare('SELECT * FROM test WHERE id = ?').get(1);
              if (row && row.id === 1) {
                console.log('✓ Database operations work correctly');
              } else {
                throw new Error('Database query returned unexpected result');
              }
              db.close();
            } catch (error) {
              console.error('✗ Database test failed:', error.message);
              if (error.message.includes('NODE_MODULE_VERSION')) {
                console.log('This is a Node.js ABI version mismatch - rebuilding...');
                process.exit(2); // Different exit code for version mismatch
              }
              process.exit(1);
            }
          " || {
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 2 ]; then
              echo "Attempting to fix Node.js version mismatch..."
              npm rebuild better-sqlite3 --build-from-source
              # Retry the test
              node -e "
                const Database = require('better-sqlite3');
                const db = new Database(':memory:');
                console.log('✓ Database test passed after rebuild');
                db.close();
              "
            else
              echo "Database test failed with non-version error"
              exit 1
            fi
          }
          
          echo "Application tests passed"
      
      - name: Package Application
        shell: bash
        run: |
          echo "Packaging Windows x64 application..."
          
          # Set platform-specific environment variables
          export npm_config_target_platform="win32"
          export npm_config_target_arch="x64"
          export npm_config_cache="$(pwd)/.npm-cache"
          
          # Package the application with error handling
          if npm run make; then
            echo "✅ Packaging completed successfully for Windows x64"
          else
            echo "❌ Packaging failed for Windows x64"
            echo "Attempting alternate maker targets (zip)..."
            npx --yes electron-forge make --targets=@electron-forge/maker-zip --platform=win32 || exit 1
          fi
      
      - name: Verify Package
        shell: bash
        run: |
          echo "Verifying Windows x64 package..."
          
          # Check if out/make directory exists
          if [[ ! -d "out/make" ]]; then
            echo "✗ No out/make directory found"
            echo "Contents of out directory:"
            ls -la out/ 2>/dev/null || echo "No out directory"
            exit 1
          fi
          
          # Look for Windows installers
          INSTALLERS=$(find out -name "*.exe" -o -name "*.msi" 2>/dev/null || echo "")
          if [[ -n "$INSTALLERS" ]]; then
            echo "✓ Windows installer(s) created:"
            echo "$INSTALLERS" | while read installer; do
              if [[ -n "$installer" ]]; then
                ls -la "$installer"
              fi
            done
          else
            echo "✗ No Windows installers found"
            echo "Full contents of out directory:"
            find out -type f 2>/dev/null || echo "No files in out directory"
            exit 1
          fi
          
          echo "Package verification completed"

      - name: Collect Installer Assets
        shell: bash
        run: |
          echo "Collecting installer assets for upload..."
          mkdir -p out/releases
          # Prefer Squirrel Setup.exe if present
          SETUP_EXE=$(find out -type f -name "*Setup*.exe" | head -n 1 || echo "")
          if [[ -n "$SETUP_EXE" ]]; then
            echo "Found Setup EXE: $SETUP_EXE"
            cp "$SETUP_EXE" out/releases/IslaJournal-Setup.exe
          else
            echo "No Setup EXE found yet. Listing EXE files under out/:"
            find out -type f -name "*.exe" || true
          fi
          # Also collect portable ZIP if created
          PORTABLE_ZIP=$(find out -type f -name "*.zip" | head -n 1 || echo "")
          if [[ -n "$PORTABLE_ZIP" ]]; then
            echo "Found portable ZIP: $PORTABLE_ZIP"
            cp "$PORTABLE_ZIP" out/releases/IslaJournal-Portable.zip || true
          fi
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            out/releases/IslaJournal-Setup.exe
            out/releases/IslaJournal-Portable.zip
          retention-days: 30
          compression-level: 6
      
      - name: List ALL files in out directory
        shell: bash
        run: |
          echo "=== COMPLETE CONTENTS OF OUT DIRECTORY ==="
          ls -la out/ || echo "No out directory"
          find . -name "*.exe" -o -name "*.msi" | head -20
          echo "=== END FILE LISTING ==="
      
      - name: Build Summary
        shell: bash
        run: |
          echo "🎉 Build Summary for Windows x64:"
          echo "- Platform: win32-x64"
          echo "- Native modules: ✓ Built and verified"
          echo "- Application: ✓ Built and tested"
          echo "- Package: ✓ Created and verified"
          echo "- Artifacts: ✓ Uploaded as windows-installer" 