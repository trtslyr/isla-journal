name: Build Windows from Source (Clean)

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build-windows-clean:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Windows Build Tools
        run: |
          echo "Setting up Windows build environment for native modules..."
          npm install --global windows-build-tools --vs2017 || echo "Build tools already installed"
        continue-on-error: true
      
      - name: Clean Environment (Remove any artifacts)
        run: |
          echo "üßπ Ensuring completely clean build environment..."
          if (Test-Path "dist") { Remove-Item -Path "dist" -Recurse -Force }
          if (Test-Path "out") { Remove-Item -Path "out" -Recurse -Force }
          if (Test-Path "node_modules") { Remove-Item -Path "node_modules" -Recurse -Force }
          if (Test-Path "package-lock.json") { Remove-Item -Path "package-lock.json" -Force }
          if (Test-Path ".npm") { Remove-Item -Path ".npm" -Recurse -Force }
          echo "‚úÖ Environment completely cleaned"
        shell: powershell
      
      - name: Fresh Install Dependencies (No Postinstall)
        run: |
          echo "üì¶ Installing dependencies without postinstall hooks..."
          npm install --ignore-scripts
          echo "‚úÖ Dependencies installed without scripts"
        shell: powershell
      
      - name: Rebuild Native Modules for Windows
        run: |
          echo "üî® Building native modules from source for Windows..."
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Platform: $env:OS"
          echo "Architecture: $env:PROCESSOR_ARCHITECTURE"
          
          # Build better-sqlite3 from source for Windows
          echo "Building better-sqlite3..."
          npm rebuild better-sqlite3 --build-from-source --verbose
          
          # Build systeminformation
          echo "Building systeminformation..."
          npm rebuild systeminformation --verbose
          
          # Use @electron/rebuild for all native modules
          echo "Running @electron/rebuild..."
          npx @electron/rebuild --verbose --force
          
          echo "‚úÖ Native modules built successfully"
        shell: powershell
      
      - name: Verify Native Modules
        run: |
          echo "üîç Verifying native module binaries..."
          
          # Check better-sqlite3
          if (Test-Path "node_modules\better-sqlite3\build\Release\better_sqlite3.node") {
            echo "‚úÖ better-sqlite3 binary exists"
            $size = (Get-Item "node_modules\better-sqlite3\build\Release\better_sqlite3.node").Length
            echo "   Size: $size bytes"
          } else {
            echo "‚ùå better-sqlite3 binary missing"
            exit 1
          }
          
          # Check systeminformation
          if (Test-Path "node_modules\systeminformation\lib") {
            echo "‚úÖ systeminformation module exists"
          } else {
            echo "‚ùå systeminformation module missing"
            exit 1
          }
          
          # Test loading the modules
          echo "Testing module loading..."
          node -e "
            try {
              const Database = require('better-sqlite3');
              console.log('‚úÖ better-sqlite3 loads successfully');
              const si = require('systeminformation');
              console.log('‚úÖ systeminformation loads successfully');
            } catch (error) {
              console.error('‚ùå Module loading failed:', error.message);
              process.exit(1);
            }
          "
        shell: powershell
      
      - name: Build Application from Source
        run: |
          echo "üî® Building application completely from source..."
          echo "Building Vite frontend..."
          npm run build:vite
          
          echo "Building main process..."
          npm run build:main
          
          echo "Building preload script..."  
          npm run build:preload
          
          echo "‚úÖ Application build completed"
        shell: powershell
      
      - name: Verify Build Output
        run: |
          echo "üîç Verifying build output..."
          
          if (Test-Path "dist\main\index.js") {
            echo "‚úÖ Main process built: dist\main\index.js"
            $size = (Get-Item "dist\main\index.js").Length
            echo "   Size: $size bytes"
          } else {
            echo "‚ùå Main process missing: dist\main\index.js"
            exit 1
          }
          
          if (Test-Path "dist\preload\index.js") {
            echo "‚úÖ Preload script built: dist\preload\index.js"
          } else {
            echo "‚ùå Preload script missing: dist\preload\index.js"
            exit 1
          }
          
          if (Test-Path "dist\renderer") {
            echo "‚úÖ Renderer built: dist\renderer"
          } else {
            echo "‚ùå Renderer missing: dist\renderer"
            exit 1
          }
        shell: powershell
      
      - name: Generate Icons (Optional)
        run: |
          echo "üé® Generating application icons..."
          npm run icons
        continue-on-error: true
        shell: powershell
      
      - name: Package Windows Application
        run: |
          echo "üì¶ Packaging Windows application..."
          npm run make
          echo "‚úÖ Windows packaging completed"
        shell: powershell
      
      - name: Verify Windows Installer
        run: |
          echo "üîç Verifying Windows installer..."
          
          if (Test-Path "out\make\squirrel.windows") {
            echo "‚úÖ Squirrel installer directory exists"
            $installers = Get-ChildItem "out\make\squirrel.windows" -Recurse -Include "*.exe"
            if ($installers.Count -gt 0) {
              echo "‚úÖ Windows installer(s) created:"
              foreach ($installer in $installers) {
                $size = $installer.Length
                echo "   $($installer.FullName) ($size bytes)"
              }
            } else {
              echo "‚ùå No .exe installers found"
              exit 1
            }
          } else {
            echo "‚ùå Squirrel installer directory missing"
            exit 1
          }
        shell: powershell
      
      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer-clean
          path: out/make/squirrel.windows/**/*.exe
          retention-days: 30
      
      - name: Create Release (if tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: out/make/squirrel.windows/**/*.exe
          name: "Isla Journal ${{ github.ref_name }}"
          draft: false
          prerelease: false
          generate_release_notes: true