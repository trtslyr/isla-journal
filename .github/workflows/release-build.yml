name: Release Build (Windows + macOS)

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  windows:
    name: Windows x64 Installer
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Clean install
        shell: bash
        run: |
          rm -rf node_modules package-lock.json dist .npm-cache 2>/dev/null || true
          npm install --package-lock-only
          npm ci --cache .npm-cache --prefer-offline

      - name: Rebuild native modules (Windows)
        shell: bash
        env:
          npm_config_target_platform: win32
          npm_config_target_arch: x64
          npm_config_build_from_source: true
        run: |
          if ! npm list electron >/dev/null 2>&1; then npm i electron; fi
          EV=$(npm list electron --depth=0 | grep electron@ | sed 's/.*electron@//' | sed 's/ .*//')
          npx --yes @electron/rebuild --verbose --force --arch=x64 --version=$EV

      - name: Build app
        shell: bash
        run: npm run build

      - name: Package (Forge)
        shell: bash
        run: |
          set -e
          if npm run make; then
            echo ok
          else
            echo "Forge make failed; trying ZIP maker"
            npx --yes electron-forge make --targets=@electron-forge/maker-zip --platform=win32
          fi

      - name: Collect Windows artifacts
        shell: bash
        run: |
          mkdir -p out/releases
          SETUP=$(find out -type f -name "*Setup*.exe" | head -n 1 || echo "")
          if [ -n "$SETUP" ]; then cp "$SETUP" out/releases/IslaJournal-Setup.exe; fi
          PORTABLE=$(find out -type f -name "*.zip" | head -n 1 || echo "")
          if [ -n "$PORTABLE" ]; then cp "$PORTABLE" out/releases/IslaJournal-Portable.zip; fi
          ls -la out/releases || true

      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'release'
        with:
          files: |
            out/releases/IslaJournal-Setup.exe
            out/releases/IslaJournal-Portable.zip
          tag_name: ${{ github.ref_name }}
          name: Isla Journal ${{ github.ref_name }}
          body: |
            Windows x64 installer and portable ZIP.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts (CI)
        uses: actions/upload-artifact@v4
        if: github.event_name != 'release'
        with:
          name: windows-installer
          path: |
            out/releases/IslaJournal-Setup.exe
            out/releases/IslaJournal-Portable.zip
          retention-days: 30

  macos:
    name: macOS Installer
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Clean install
        shell: bash
        run: |
          rm -rf node_modules package-lock.json dist .npm-cache 2>/dev/null || true
          npm install --package-lock-only
          npm ci --cache .npm-cache --prefer-offline

      - name: Setup build tools (mac)
        shell: bash
        run: |
          npm i -g node-gyp || true
          export PYTHON=$(which python3)
          echo "Python: $(python3 --version)"

      - name: Rebuild native modules (mac)
        shell: bash
        env:
          npm_config_target_platform: darwin
          npm_config_target_arch: ${{ matrix.arch }}
          npm_config_build_from_source: true
        run: |
          if ! npm list electron >/dev/null 2>&1; then npm i electron; fi
          EV=$(npm list electron --depth=0 | grep electron@ | sed 's/.*electron@//' | sed 's/ .*//')
          npx --yes @electron/rebuild --verbose --force --arch=${{ matrix.arch }} --version=$EV

      - name: Build app
        shell: bash
        run: npm run build

      - name: Package (Forge)
        shell: bash
        run: |
          set -e
          if npm run make; then
            echo ok
          else
            echo "Forge make failed; trying ZIP maker"
            npx --yes electron-forge make --targets=@electron-forge/maker-zip --platform=darwin
          fi

      - name: Collect mac artifacts
        shell: bash
        run: |
          mkdir -p out/releases
          DMG=$(find out -type f -name "*.dmg" | head -n 1 || echo "")
          if [ -n "$DMG" ]; then cp "$DMG" out/releases/IslaJournal-${{ matrix.arch }}.dmg; fi
          ZIP=$(find out -type f -name "*.zip" | head -n 1 || echo "")
          if [ -n "$ZIP" ]; then cp "$ZIP" out/releases/IslaJournal-${{ matrix.arch }}.zip; fi
          ls -la out/releases || true

      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'release'
        with:
          files: |
            out/releases/IslaJournal-${{ matrix.arch }}.dmg
            out/releases/IslaJournal-${{ matrix.arch }}.zip
          tag_name: ${{ github.ref_name }}
          name: Isla Journal ${{ github.ref_name }}
          body: |
            macOS installer (DMG) and ZIP for arch=${{ matrix.arch }}.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts (CI)
        uses: actions/upload-artifact@v4
        if: github.event_name != 'release'
        with:
          name: macos-${{ matrix.arch }}
          path: |
            out/releases/*.dmg
            out/releases/*.zip
          retention-days: 30