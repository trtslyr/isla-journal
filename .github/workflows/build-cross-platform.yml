name: Build Cross-Platform

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            platform: win32
            arch: x64
            name: windows-x64
            artifact: windows-installer
          
          # macOS builds  
          - os: macos-latest
            platform: darwin
            arch: x64
            name: macos-intel
            artifact: macos-intel-installer
            
          - os: macos-latest
            platform: darwin
            arch: arm64
            name: macos-apple-silicon
            artifact: macos-arm64-installer
    
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.name }}
    
    env:
      # Apple signing environment variables (macOS only)
      CSC_TEAM_ID: ${{ secrets.TEAM_ID }}
      CSC_LINK: ${{ secrets.P12_BASE64 }}
      CSC_KEY_PASSWORD: ${{ secrets.P12_PASSWORD }}
      APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
      APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
      APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Display Build Info
        shell: bash
        run: |
          echo "Building for: ${{ matrix.name }}"
          echo "Platform: ${{ matrix.platform }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "Host OS: ${{ runner.os }}"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Python version: $(python3 --version 2>/dev/null || echo 'Python3 not found')"
          echo "Python path: $(which python3 2>/dev/null || echo 'Python3 not in PATH')"
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "Xcode version: $(xcodebuild -version 2>/dev/null || echo 'Xcode not found')"
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "Visual Studio: $(where cl.exe 2>/dev/null || echo 'cl.exe not found')"
          fi
      
      - name: Clean Install Dependencies
        shell: bash
        run: |
          echo "Fresh install with platform isolation..."
          # Complete clean slate to prevent cross-platform contamination
          rm -rf node_modules package-lock.json dist .npm-cache 2>/dev/null || true
          rm -rf ~/.electron ~/.cache/electron ~/.cache/node-gyp 2>/dev/null || true
          
          # Platform-specific installation
          echo "Installing for platform: ${{ matrix.platform }}-${{ matrix.arch }}"
          npm install --package-lock-only
          npm ci --cache .npm-cache --prefer-offline
          echo "Dependencies installed successfully for ${{ matrix.name }}"
      
      - name: Setup Build Tools
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "Setting up macOS build tools..."
            # Ensure Xcode command line tools are available
            xcode-select --install 2>/dev/null || echo "Xcode tools already installed"
            
            # Install node-gyp globally for native module building
            npm install -g node-gyp
            
            # Set Python path for node-gyp via environment
            export PYTHON=$(which python3)
            echo "Python path: $PYTHON"
            python3 --version
            
            # Verify build tools
            echo "Checking build environment:"
            echo "- node-gyp: $(node-gyp --version)"
            echo "- clang: $(clang --version | head -1)"
            
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "Setting up Windows build tools..."
            # Set Python path for node-gyp via environment  
            export PYTHON=$(which python3 || which python)
            echo "Python path: $PYTHON"
          fi
          echo "Build tools configured"
      
      - name: Rebuild Native Modules
        shell: bash
        env:
          npm_config_target_platform: ${{ matrix.platform }}
          npm_config_target_arch: ${{ matrix.arch }}
          npm_config_build_from_source: true
          npm_config_electron_cache: ""
          npm_config_cache: ""
        run: |
          echo "Building native modules from source for ${{ matrix.platform }}-${{ matrix.arch }}"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          
          # Ensure Electron is installed before rebuilding
          if ! npm list electron >/dev/null 2>&1; then
            echo "Installing electron..."
            npm install electron
          fi
          
          # Get Electron version for proper rebuild
          ELECTRON_VERSION=$(npm list electron --depth=0 | grep electron@ | sed 's/.*electron@//' | sed 's/ .*//')
          echo "Electron version: $ELECTRON_VERSION"
          
          # Clean only native binaries, not entire build directories
          echo "Cleaning existing native module binaries..."
          find node_modules -name "*.node" -delete 2>/dev/null || true
          find node_modules -path "*/build/Release" -name "*.node" -delete 2>/dev/null || true
          
          # Rebuild Electron app native modules
          echo "Rebuilding Electron app native modules..."
          if [[ "${{ matrix.arch }}" == "arm64" && "${{ runner.os }}" == "macOS" ]]; then
            # Apple Silicon specific rebuild
            echo "Building for Apple Silicon..."
            npx --yes @electron/rebuild --verbose --force --arch=arm64 --version=$ELECTRON_VERSION
          else
            # Standard rebuild
            echo "Building for ${{ matrix.arch }}..."
            npx --yes @electron/rebuild --verbose --force --arch=${{ matrix.arch }} --version=$ELECTRON_VERSION
          fi
          
          # Rebuild packaging tools native modules (macOS DMG tools)
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "Rebuilding DMG packaging native modules for macOS..."
            
            # Find and rebuild appdmg and related packages
            if npm list appdmg >/dev/null 2>&1; then
              echo "Rebuilding appdmg native modules..."
              # Rebuild appdmg's native dependencies
              (cd node_modules/appdmg && npm rebuild) || echo "appdmg rebuild failed, trying alternative..."
            fi
            
            # Alternative: rebuild all native modules in packaging tools
            echo "Rebuilding all native modules for packaging tools..."
            find node_modules -name "binding.gyp" -exec dirname {} \; | while read dir; do
              echo "Rebuilding native module in: $dir"
              (cd "$dir" && node-gyp rebuild) || echo "Failed to rebuild $dir, continuing..."
            done
          fi
          
          echo "Native modules rebuilt successfully"
      
      - name: Verify Native Modules
        shell: bash
        run: |
          echo "Verifying native modules for ${{ matrix.platform }}-${{ matrix.arch }}"
          
          # Test better-sqlite3 binary exists
          SQLITE_BINARY="node_modules/better-sqlite3/build/Release/better_sqlite3.node"
          if [[ -f "$SQLITE_BINARY" ]]; then
            echo "✓ better-sqlite3 binary exists"
            ls -la "$SQLITE_BINARY"
          else
            echo "✗ better-sqlite3 binary missing"
            echo "Contents of build directory:"
            ls -la node_modules/better-sqlite3/build/ 2>/dev/null || echo "No build directory"
            exit 1
          fi
          
          # Test loading
          node -e "
            try {
              require('better-sqlite3');
              console.log('✓ better-sqlite3 loads successfully');
            } catch(e) {
              console.log('✗ better-sqlite3 load failed:', e.message);
              process.exit(1);
            }
          "
          
          echo "Native modules verified"
      
      - name: Build Application
        shell: bash
        run: |
          echo "Building application for ${{ matrix.platform }}-${{ matrix.arch }}"
          
          # Use the comprehensive npm build script
          echo "Building complete application using npm build script..."
          npm run build
          
          # Verify all build outputs
          echo "Verifying build outputs..."
          
          # Verify frontend build
          if [[ ! -d "dist/renderer" ]]; then
            echo "✗ Frontend build failed - dist/renderer missing"
            echo "Contents of dist directory:"
            ls -la dist/ 2>/dev/null || echo "dist directory doesn't exist"
            exit 1
          fi
          echo "✓ Frontend build successful"
          
          # Verify main process build
          if [[ ! -f "dist/main/index.js" ]]; then
            echo "✗ Main process build failed - dist/main/index.js missing"
            echo "Contents of dist/main:"
            ls -la dist/main/ 2>/dev/null || echo "dist/main directory doesn't exist"
            exit 1
          fi
          echo "✓ Main process build successful"
          
          # Verify preload build  
          if [[ ! -f "dist/preload/index.js" ]]; then
            echo "✗ Preload build failed - dist/preload/index.js missing"
            echo "Contents of dist/preload:"
            ls -la dist/preload/ 2>/dev/null || echo "dist/preload directory doesn't exist"
            exit 1
          fi
          echo "✓ Preload build successful"
          
          echo "Application build completed"
      
      - name: Test Application
        shell: bash
        run: |
          echo "Testing application startup for ${{ matrix.platform }}-${{ matrix.arch }}"
          
          export CI=true
          export NODE_ENV=test
          
          # Test main process loading
          node -e "
            process.env.NODE_ENV = 'test';
            try {
              console.log('Testing main process...');
              const main = require('./dist/main/index.js');
              console.log('✓ Main process structure valid');
            } catch (error) {
              if (error.message.includes('app.whenReady') || 
                  error.message.includes('electron') ||
                  error.message.includes('getPath') ||
                  error.message.includes('Cannot read properties of undefined')) {
                console.log('✓ Main process structure valid (Electron context expected)');
              } else {
                console.error('✗ Main process error:', error.message);
                process.exit(1);
              }
            }
          "
          
          # Test database functionality with proper error handling
          node -e "
            try {
              console.log('Testing database with Node.js version:', process.version);
              const Database = require('better-sqlite3');
              const db = new Database(':memory:');
              db.exec('CREATE TABLE test (id INTEGER PRIMARY KEY)');
              db.exec('INSERT INTO test (id) VALUES (1)');
              const row = db.prepare('SELECT * FROM test WHERE id = ?').get(1);
              if (row && row.id === 1) {
                console.log('✓ Database operations work correctly');
              } else {
                throw new Error('Database query returned unexpected result');
              }
              db.close();
            } catch (error) {
              console.error('✗ Database test failed:', error.message);
              if (error.message.includes('NODE_MODULE_VERSION')) {
                console.log('This is a Node.js ABI version mismatch - rebuilding...');
                process.exit(2); // Different exit code for version mismatch
              }
              process.exit(1);
            }
          " || {
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 2 ]; then
              echo "Attempting to fix Node.js version mismatch..."
              npm rebuild better-sqlite3 --build-from-source
              # Retry the test
              node -e "
                const Database = require('better-sqlite3');
                const db = new Database(':memory:');
                console.log('✓ Database test passed after rebuild');
                db.close();
              "
            else
              echo "Database test failed with non-version error"
              exit 1
            fi
          }
          
          echo "Application tests passed"
      
      - name: Package Application (electron-builder)
        shell: bash
        run: |
          echo "Packaging ${{ matrix.name }} application with electron-builder..."
          
          # electron-builder outputs to 'release/' per package.json config
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              npx --yes electron-builder --mac dmg zip --arm64 --publish=never | cat
            else
              npx --yes electron-builder --mac dmg zip --x64 --publish=never | cat
            fi
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            npx --yes electron-builder --win nsis portable --x64 --publish=never | cat
          else
            echo "Unsupported OS: ${{ runner.os }}"
            exit 1
          fi
      
      - name: Verify Package
        shell: bash
        run: |
          echo "Verifying ${{ matrix.name }} package..."
          
          if [[ -d "release" ]]; then
            echo "✓ Found electron-builder output directory: release/"
            find release -type f | head -50
          else
            echo "⚠️ No release directory, checking electron-forge fallback out/make/"
            if [[ ! -d "out/make" ]]; then
              echo "✗ Neither release/ nor out/make/ directories found"
              ls -la || true
              exit 1
            fi
          fi
          
          # Platform-specific installer verification
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Look for Windows installers in multiple possible locations
            INSTALLERS=$(find out -name "*.exe" -o -name "*.msi" 2>/dev/null || echo "")
            if [[ -n "$INSTALLERS" ]]; then
              echo "✓ Windows installer(s) created:"
              echo "$INSTALLERS" | while read installer; do
                if [[ -n "$installer" ]]; then
                  ls -la "$installer"
                fi
              done
            else
              echo "✗ No Windows installers found"
              echo "Full contents of out directory:"
              find out -type f 2>/dev/null || echo "No files in out directory"
              exit 1
            fi
          else
            # Look for macOS installers in multiple possible locations (DMG preferred, ZIP as fallback)
            DMGS=$(find release out -name "*.dmg" 2>/dev/null || echo "")
            ZIPS=$(find release out -name "*.zip" 2>/dev/null || echo "")
            APPS=$(find release out -name "*.app" 2>/dev/null || echo "")
            
            if [[ -n "$DMGS" ]]; then
              echo "✓ macOS DMG installer(s) created:"
              echo "$DMGS" | while read installer; do
                if [[ -n "$installer" ]]; then
                  ls -la "$installer"
                fi
              done
            elif [[ -n "$ZIPS" ]]; then
              echo "✓ macOS ZIP package(s) created (DMG creation bypassed):"
              echo "$ZIPS" | while read installer; do
                if [[ -n "$installer" ]]; then
                  ls -la "$installer"
                fi
              done
            elif [[ -n "$APPS" ]]; then
              echo "✓ macOS APP bundle(s) created:"
              echo "$APPS" | while read installer; do
                if [[ -n "$installer" ]]; then
                  ls -la "$installer"
                fi
              done
            else
              echo "✗ No macOS installers found"
              echo "Full contents of out directory:"
              find out -type f 2>/dev/null || echo "No files in out directory"
              exit 1
            fi
          fi
          
          echo "Package verification completed"
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            release/**/*.exe
            release/**/*.msi
            release/**/*.dmg
            release/**/*.zip
            release/**/*.app
            out/**/*.exe
            out/**/*.msi
            out/**/*.dmg
            out/**/*.zip
            out/**/*.app
          retention-days: 30
          compression-level: 6
      
      - name: List ALL files in release/out directories
        shell: bash
        run: |
          echo "=== CONTENTS OF release/ DIRECTORY ==="
          ls -la release/ || echo "No release directory"
          echo "=== CONTENTS OF out/ DIRECTORY ==="
          ls -la out/ || echo "No out directory"
          echo "=== FIRST 50 INSTALLER FILES FOUND ==="
          find . -name "*.exe" -o -name "*.dmg" -o -name "*.msi" -o -name "*.zip" -o -name "*.app" | head -50
          echo "=== END FILE LISTING ==="
          
      - name: Upload to GitHub Release - Latest
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            **/*.dmg
            **/*.exe
            **/*.msi
            **/*.zip
          tag_name: ${{ github.ref_name }}
          name: "Isla Journal ${{ github.ref_name }}"
          body: |
            🚀 **Isla Journal ${{ github.ref_name }}** - Latest Release
            
            📦 **DIRECT DOWNLOADS:**
            - **🪟 Windows**: Download the `.exe` installer below
            - **🍎 Mac Intel**: Download the Intel `.dmg` installer below (signed)
            - **🍎 Mac Apple Silicon**: Download the ARM64 `.dmg` installer below (signed)
            
            ✨ **Features:**
            - ✅ AI-powered offline journal with local LLM support
            - ✅ VS Code-style interface with file tree
            - ✅ Fully offline - your data stays on your device
            - ✅ Cross-platform: Windows, macOS (Intel + Apple Silicon)
            - ✅ Signed macOS builds (no security warnings)
            
            **Click the installer file below for your platform and you're ready to go!** 🎉
          draft: false
          prerelease: false
          make_latest: true
          fail_on_unmatched_files: false
          generate_release_notes: false
      
      - name: Build Summary
        shell: bash
        run: |
          echo "🎉 Build Summary for ${{ matrix.name }}:"
          echo "- Platform: ${{ matrix.platform }}-${{ matrix.arch }}"
          echo "- Native modules: ✓ Built and verified"
          echo "- Application: ✓ Built and tested"
          echo "- Package: ✓ Created and verified"
          echo "- Artifacts: ✓ Uploaded as ${{ matrix.artifact }}"