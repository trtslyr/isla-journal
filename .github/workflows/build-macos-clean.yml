name: Build macOS from Source

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build-macos:
    strategy:
      matrix:
        include:
          - arch: x64
            npm_config_target_arch: x64
            name_suffix: intel
          - arch: arm64
            npm_config_target_arch: arm64
            name_suffix: apple-silicon
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # Don't use npm cache to avoid lockfile conflicts
      
      - name: Setup macOS Build Environment
        run: |
          echo "Setting up macOS build environment for native modules..."
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Platform: $(uname -s)"
          echo "Host Architecture: $(uname -m)"
          echo "Target Architecture: ${{ matrix.arch }}"
          # Install Python for native module compilation
          brew install python@3.11 || echo "Python already installed"
      
      - name: Clean Environment (Remove any artifacts)
        run: |
          echo "Ensuring completely clean build environment..."
          rm -rf dist out node_modules package-lock.json .npm || true
          echo "Environment completely cleaned"
      
      - name: Fresh Install Dependencies
        run: |
          echo "Installing dependencies with clean postinstall..."
          echo "Generating fresh package-lock.json..."
          npm install --package-lock-only
          echo "Installing with fresh lockfile (build from source)..."
          # Force npm to build from source
          export npm_config_build_from_source=true
          export npm_config_cache=""
          npm ci
          echo "Dependencies installed successfully"
      
      - name: Rebuild Native Modules for macOS
        run: |
          echo "Building native modules from source for macOS..."
          
          # Ensure we're building for the correct platform and architecture
          export npm_config_target_platform="darwin"
          export npm_config_target_arch="${{ matrix.npm_config_target_arch }}"
          export npm_config_build_from_source=true
          export npm_config_sqlite3_binary_host_mirror=""
          export npm_config_electron_cache=""
          
          echo "Platform: darwin, Architecture: ${{ matrix.arch }}"
          echo "Force building better-sqlite3 from source..."
          npm rebuild better-sqlite3 --build-from-source --verbose
          
          echo "Building systeminformation from source..."
          npm rebuild systeminformation --verbose
          
          echo "Running @electron/rebuild for all modules..."
          npx @electron/rebuild --verbose --force --arch=${{ matrix.arch }}
          
          echo "Native modules built successfully"
      
      - name: Verify Native Modules
        run: |
          echo "Verifying native module binaries for macOS ${{ matrix.arch }}..."
          
          # Check better-sqlite3
          if [ -f "node_modules/better-sqlite3/build/Release/better_sqlite3.node" ]; then
            echo "SUCCESS: better-sqlite3 binary exists"
            ls -la "node_modules/better-sqlite3/build/Release/better_sqlite3.node"
            
            # Verify it's a macOS binary (Mach-O format)
            file_output=$(file "node_modules/better-sqlite3/build/Release/better_sqlite3.node")
            if echo "$file_output" | grep -q "Mach-O"; then
              echo "   VERIFIED: macOS Mach-O executable format"
              echo "   Details: $file_output"
            else
              echo "   ERROR: Not a macOS binary! May contain Windows artifacts"
              echo "   File type: $file_output"
              exit 1
            fi
          else
            echo "ERROR: better-sqlite3 binary missing"
            # List what's actually in the build directory
            if [ -d "node_modules/better-sqlite3/build" ]; then
              echo "Build directory contents:"
              find node_modules/better-sqlite3/build -type f
            fi
            exit 1
          fi
          
          # Check systeminformation
          if [ -d "node_modules/systeminformation/lib" ]; then
            echo "SUCCESS: systeminformation module exists"
          else
            echo "ERROR: systeminformation module missing"
            exit 1
          fi
          
          # Test loading the modules on macOS
          echo "Testing module loading on macOS..."
          node -e "
            try {
              const Database = require('better-sqlite3');
              console.log('SUCCESS: better-sqlite3 loads successfully on macOS');
              const si = require('systeminformation');
              console.log('SUCCESS: systeminformation loads successfully on macOS');
            } catch (error) {
              console.error('ERROR: Module loading failed on macOS:', error.message);
              process.exit(1);
            }
          "
      
      - name: Build Application from Source
        run: |
          echo "Building application completely from source..."
          
          # Clean any existing build artifacts first
          rm -rf dist || true
          
          echo "Building Vite frontend for macOS ${{ matrix.arch }}..."
          npm run build:vite
          
          echo "Building main process for macOS ${{ matrix.arch }}..."
          npm run build:main
          
          echo "Building preload script for macOS ${{ matrix.arch }}..."  
          npm run build:preload
          
          # Verify no Windows artifacts in build
          echo "Checking for any Windows artifacts in build..."
          windows_artifacts=$(find dist -name "*.exe" -o -name "*.dll" -o -name "*win32*" -o -name "*windows*" 2>/dev/null || true)
          if [ -n "$windows_artifacts" ]; then
            echo "ERROR: Windows artifacts found in build:"
            echo "$windows_artifacts"
            exit 1
          else
            echo "VERIFIED: No Windows artifacts found in build"
          fi
          
          echo "Application build completed (macOS-${{ matrix.arch }}-only)"
      
      - name: Verify Build Output
        run: |
          echo "Verifying build output..."
          
          if [ -f "dist/main/index.js" ]; then
            echo "SUCCESS: Main process built: dist/main/index.js"
            ls -la "dist/main/index.js"
          else
            echo "ERROR: Main process missing: dist/main/index.js"
            if [ -d "dist" ]; then
              echo "Dist directory contents:"
              find dist -type f
            fi
            exit 1
          fi
          
          if [ -f "dist/preload/index.js" ]; then
            echo "SUCCESS: Preload script built: dist/preload/index.js"
          else
            echo "ERROR: Preload script missing: dist/preload/index.js"
            exit 1
          fi
          
          if [ -d "dist/renderer" ]; then
            echo "SUCCESS: Renderer built: dist/renderer"
            renderer_files=$(find dist/renderer -type f | wc -l)
            echo "   Renderer files: $renderer_files"
          else
            echo "ERROR: Renderer missing: dist/renderer"
            exit 1
          fi
      
      - name: Generate Icons (Optional)
        run: |
          echo "Generating application icons..."
          npm run icons
        continue-on-error: true
      
      - name: Package macOS Application
        run: |
          echo "Packaging macOS ${{ matrix.arch }} application..."
          npm run make
          echo "macOS ${{ matrix.arch }} packaging completed"
      
      - name: Test Application Startup
        run: |
          echo "Testing application startup..."
          # Test that the built app can start without runtime errors
          export CI=true
          export NODE_ENV=test
          echo "Testing main process imports..."
          node -e "
            try {
              console.log('Testing main process...');
              require('./dist/main/index.js');
              console.log('SUCCESS: Main process loads successfully');
            } catch (error) {
              if (error.message.includes('app.whenReady') || error.message.includes('electron')) {
                console.log('SUCCESS: Main process structure is valid (Electron context expected)');
              } else {
                console.error('ERROR: Main process error:', error.message);
                process.exit(1);
              }
            }
          "
          echo "Testing database connectivity..."
          node -e "
            try {
              const Database = require('better-sqlite3');
              const db = new Database(':memory:');
              db.exec('CREATE TABLE test (id INTEGER)');
              db.exec('INSERT INTO test (id) VALUES (1)');
              const result = db.prepare('SELECT * FROM test').get();
              db.close();
              console.log('SUCCESS: Database operations work correctly');
            } catch (error) {
              console.error('ERROR: Database test failed:', error.message);
              process.exit(1);
            }
          "
          echo "Application startup tests passed"
      
      - name: Verify macOS Installer
        run: |
          echo "Verifying macOS ${{ matrix.arch }} installer..."
          
          if [ -d "out/make" ]; then
            echo "SUCCESS: Make output directory exists"
            dmg_files=$(find out/make -name "*.dmg" 2>/dev/null || true)
            zip_files=$(find out/make -name "*.zip" 2>/dev/null || true)
            
            if [ -n "$dmg_files" ] || [ -n "$zip_files" ]; then
              echo "SUCCESS: macOS ${{ matrix.arch }} installer(s) created:"
              for file in $dmg_files $zip_files; do
                if [ -f "$file" ]; then
                  size_mb=$(( $(stat -f%z "$file" 2>/dev/null || echo "0") / 1024 / 1024 ))
                  echo "   $(basename "$file") (${size_mb} MB)"
                fi
              done
            else
              echo "ERROR: No .dmg or .zip installers found"
              echo "Directory contents:"
              find out/make -type f 2>/dev/null || echo "No files found"
              exit 1
            fi
          else
            echo "ERROR: Make output directory missing"
            if [ -d "out" ]; then
              echo "Out directory contents:"
              find out -type f 2>/dev/null || echo "No files found"
            fi
            exit 1
          fi
      
      - name: Upload macOS Installer
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.name_suffix }}-installer
          path: |
            out/make/*.dmg
            out/make/*.zip
          retention-days: 30
      
      - name: Create Release (if tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            out/make/*.dmg
            out/make/*.zip
          name: "Isla Journal ${{ github.ref_name }}"
          draft: false
          prerelease: false
          generate_release_notes: true